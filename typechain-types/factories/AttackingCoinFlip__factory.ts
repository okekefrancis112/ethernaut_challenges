/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AttackingCoinFlip,
  AttackingCoinFlipInterface,
} from "../AttackingCoinFlip";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_contractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "contractAddress",
    outputs: [
      {
        internalType: "contract CoinFlip",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hackContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637ca2474e1461003b578063f6b4dfb414610045575b600080fd5b610043610074565b005b600054610058906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600061007e610102565b600054604051631d263f6760e01b815282151560048201529192506001600160a01b031690631d263f6790602401602060405180830381600087803b1580156100c657600080fd5b505af11580156100da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fe9190610141565b5050565b60008061011060014361016a565b4090506000610123600160ff1b8361018f565b9050600081600114610136576000610139565b60015b949350505050565b60006020828403121561015357600080fd5b8151801515811461016357600080fd5b9392505050565b60008282101561018a57634e487b7160e01b600052601160045260246000fd5b500390565b6000826101ac57634e487b7160e01b600052601260045260246000fd5b50049056fea264697066735822122078607a8dca6c501e4e3e541c3996103ede0d9efd77682b86773aa065249a2e6564736f6c63430008090033";

type AttackingCoinFlipConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackingCoinFlipConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackingCoinFlip__factory extends ContractFactory {
  constructor(...args: AttackingCoinFlipConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AttackingCoinFlip";
  }

  deploy(
    _contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AttackingCoinFlip> {
    return super.deploy(
      _contractAddress,
      overrides || {}
    ) as Promise<AttackingCoinFlip>;
  }
  getDeployTransaction(
    _contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_contractAddress, overrides || {});
  }
  attach(address: string): AttackingCoinFlip {
    return super.attach(address) as AttackingCoinFlip;
  }
  connect(signer: Signer): AttackingCoinFlip__factory {
    return super.connect(signer) as AttackingCoinFlip__factory;
  }
  static readonly contractName: "AttackingCoinFlip";
  public readonly contractName: "AttackingCoinFlip";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackingCoinFlipInterface {
    return new utils.Interface(_abi) as AttackingCoinFlipInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackingCoinFlip {
    return new Contract(address, _abi, signerOrProvider) as AttackingCoinFlip;
  }
}
