/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Denial, DenialInterface } from "../Denial";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "contractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "partner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_partner",
        type: "address",
      },
    ],
    name: "setWithdrawPartner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "timeLastWithdrawn",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "withdrawPartnerBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052600180546001600160a01b0319163317905561033e806100256000396000f3fe6080604052600436106100745760003560e01c80638b7afe2e1161004e5780638b7afe2e146100fd5780638da5cb5b14610110578063be10862b14610148578063e4d90de21461016857600080fd5b80633ccfd60b146100805780634e1c59141461009757806352d0f784146100d457600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b50610095610195565b005b3480156100a357600080fd5b506100956100b2366004610290565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b3480156100e057600080fd5b506100ea60025481565b6040519081526020015b60405180910390f35b34801561010957600080fd5b50476100ea565b34801561011c57600080fd5b50600154610130906001600160a01b031681565b6040516001600160a01b0390911681526020016100f4565b34801561015457600080fd5b50600054610130906001600160a01b031681565b34801561017457600080fd5b506100ea610183366004610290565b60036020526000908152604090205481565b60006101a26064476102c0565b600080546040519293506001600160a01b031691839181818185875af1925050503d80600081146101ef576040519150601f19603f3d011682016040523d82523d6000602084013e6101f4565b606091505b50506001546040516001600160a01b0390911691508290600081818185875af1925050503d8060008114610244576040519150601f19603f3d011682016040523d82523d6000602084013e610249565b606091505b50504260025550600080546001600160a01b03168152600360205260409020546102749082906102e2565b600080546001600160a01b031681526003602052604090205550565b6000602082840312156102a257600080fd5b81356001600160a01b03811681146102b957600080fd5b9392505050565b6000826102dd57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561030357634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220d9e804bcd74154b74f68e1d2d4c29d9201859b3c763dad7a77387141ccc2759c64736f6c63430008090033";

type DenialConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DenialConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Denial__factory extends ContractFactory {
  constructor(...args: DenialConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Denial";
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Denial> {
    return super.deploy(overrides || {}) as Promise<Denial>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Denial {
    return super.attach(address) as Denial;
  }
  connect(signer: Signer): Denial__factory {
    return super.connect(signer) as Denial__factory;
  }
  static readonly contractName: "Denial";
  public readonly contractName: "Denial";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DenialInterface {
    return new utils.Interface(_abi) as DenialInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Denial {
    return new Contract(address, _abi, signerOrProvider) as Denial;
  }
}
