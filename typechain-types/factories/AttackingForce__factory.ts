/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AttackingForce,
  AttackingForceInterface,
} from "../AttackingForce";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_contractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "contractAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "hackContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161014338038061014383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b60b1806100926000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80637ca2474e146037578063f6b4dfb414603f575b600080fd5b603d606d565b005b6000546051906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b6000546001600160a01b0316fffea264697066735822122036d5dbf055a5829c7c77927147db8d1ba3d4d812244eaa05284c30a3c1574c5864736f6c63430008090033";

type AttackingForceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackingForceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackingForce__factory extends ContractFactory {
  constructor(...args: AttackingForceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AttackingForce";
  }

  deploy(
    _contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AttackingForce> {
    return super.deploy(
      _contractAddress,
      overrides || {}
    ) as Promise<AttackingForce>;
  }
  getDeployTransaction(
    _contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_contractAddress, overrides || {});
  }
  attach(address: string): AttackingForce {
    return super.attach(address) as AttackingForce;
  }
  connect(signer: Signer): AttackingForce__factory {
    return super.connect(signer) as AttackingForce__factory;
  }
  static readonly contractName: "AttackingForce";
  public readonly contractName: "AttackingForce";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackingForceInterface {
    return new utils.Interface(_abi) as AttackingForceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackingForce {
    return new Contract(address, _abi, signerOrProvider) as AttackingForce;
  }
}
