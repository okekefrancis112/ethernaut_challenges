/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Reentrance, ReentranceInterface } from "../Reentrance";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_who",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "donate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052610282806100136000396000f3fe6080604052600436106100425760003560e01c8062362a951461004e57806327e235e3146100635780633ccfd60b146100a257806370a08231146100b757600080fd5b3661004957005b600080fd5b61006161005c3660046101f6565b6100ed565b005b34801561006f57600080fd5b5061009061007e3660046101f6565b60006020819052908152604090205481565b60405190815260200160405180910390f35b3480156100ae57600080fd5b5061006161012d565b3480156100c357600080fd5b506100906100d23660046101f6565b6001600160a01b031660009081526020819052604090205490565b6001600160a01b038116600090815260208190526040902054610111903490610226565b6001600160a01b03909116600090815260208190526040902055565b336000908152602081905260409020546001116101f457336000818152602081905260408082205490519192918381818185875af1925050503d8060008114610192576040519150601f19603f3d011682016040523d82523d6000602084013e610197565b606091505b50509050806101e25760405162461bcd60e51b8152602060048201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b604482015260640160405180910390fd5b50336000908152602081905260408120555b565b60006020828403121561020857600080fd5b81356001600160a01b038116811461021f57600080fd5b9392505050565b6000821982111561024757634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220dc8250ef6631f5f3513d8ce428d3e7e518e4e18c11f951cbbe2085bad15d27a064736f6c63430008090033";

type ReentranceConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReentranceConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Reentrance__factory extends ContractFactory {
  constructor(...args: ReentranceConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Reentrance";
  }

  deploy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<Reentrance> {
    return super.deploy(overrides || {}) as Promise<Reentrance>;
  }
  getDeployTransaction(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Reentrance {
    return super.attach(address) as Reentrance;
  }
  connect(signer: Signer): Reentrance__factory {
    return super.connect(signer) as Reentrance__factory;
  }
  static readonly contractName: "Reentrance";
  public readonly contractName: "Reentrance";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReentranceInterface {
    return new utils.Interface(_abi) as ReentranceInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reentrance {
    return new Contract(address, _abi, signerOrProvider) as Reentrance;
  }
}
