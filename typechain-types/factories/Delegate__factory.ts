/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Delegate, DelegateInterface } from "../Delegate";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pwn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161014538038061014583398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b60b3806100926000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80638da5cb5b146037578063dd365b8b146065575b600080fd5b6000546049906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b607b600080546001600160a01b03191633179055565b00fea2646970667358221220e537b3ccc3ca1c3b41c0575dd23bd5d1962101500e3fc6a3bfb9fa7e9b2c6fd364736f6c63430008090033";

type DelegateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DelegateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Delegate__factory extends ContractFactory {
  constructor(...args: DelegateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Delegate";
  }

  deploy(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Delegate> {
    return super.deploy(_owner, overrides || {}) as Promise<Delegate>;
  }
  getDeployTransaction(
    _owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_owner, overrides || {});
  }
  attach(address: string): Delegate {
    return super.attach(address) as Delegate;
  }
  connect(signer: Signer): Delegate__factory {
    return super.connect(signer) as Delegate__factory;
  }
  static readonly contractName: "Delegate";
  public readonly contractName: "Delegate";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DelegateInterface {
    return new utils.Interface(_abi) as DelegateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Delegate {
    return new Contract(address, _abi, signerOrProvider) as Delegate;
  }
}
