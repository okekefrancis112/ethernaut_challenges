/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  AttackingDenial,
  AttackingDenialInterface,
} from "../AttackingDenial";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_contractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "contractAddress",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161013c38038061013c83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b60aa806100926000396000f3fe608060405260043610601c5760003560e01c8063f6b4dfb4146024575b6022605e565b005b348015602f57600080fd5b506000546042906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b634e487b7160e01b600052600160045260246000fdfea26469706673582212207f7d8f6112b007010eada0e80120b2b5368e589a29c18fd5d574eaae5a40cdcd64736f6c63430008090033";

type AttackingDenialConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackingDenialConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AttackingDenial__factory extends ContractFactory {
  constructor(...args: AttackingDenialConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "AttackingDenial";
  }

  deploy(
    _contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<AttackingDenial> {
    return super.deploy(
      _contractAddress,
      overrides || {}
    ) as Promise<AttackingDenial>;
  }
  getDeployTransaction(
    _contractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_contractAddress, overrides || {});
  }
  attach(address: string): AttackingDenial {
    return super.attach(address) as AttackingDenial;
  }
  connect(signer: Signer): AttackingDenial__factory {
    return super.connect(signer) as AttackingDenial__factory;
  }
  static readonly contractName: "AttackingDenial";
  public readonly contractName: "AttackingDenial";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackingDenialInterface {
    return new utils.Interface(_abi) as AttackingDenialInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AttackingDenial {
    return new Contract(address, _abi, signerOrProvider) as AttackingDenial;
  }
}
